<h1>About</h1>
<p>cdtemplate</p>
<p><a href="https://mde.tw/pjcopsim">https://mde.tw/pjcopsim</a></p>
<p></p>
<p>40923241 nfu40923241</p>
<p></p>
<h1>W9</h1>
<h2>40923241</h2>
<p>這個禮拜我試著處裡coppeliasim430執行時找不到路徑的問題，發現跟python執行檔中的SciTE有關，嘗試解決，目前已知是<span>SciTE與python編碼格式不一致，仍在嘗試解決。</span></p>
<h2>40971219</h2>
<p><span>本週嘗試與組員研究問題但能需要改進。</span></p>
<h2>40971220</h2>
<p><span>本周學習如何使用鍵盤操控紅綠車。</span></p>
<h1>W10</h1>
<p><span>40971220 程式內容構想</span></p>
<p><span>40971219</span></p>
<div>How do you establish a connection between a Python script and CoppeliaSim using zmqRemoteAPI?</div>
<div></div>
<div>40923241 嘗試在網站上建立Brython 程式環境，亂數排列各小組的倉儲及網站。</div>
<div></div>
<div>問題三:zmqRemoteAPI是CoppeliaSim仿真軟件提供的一種遠程調用API，可以通過ZeroMQ網絡協議進行通信。以下是一些常見的zmqRemoteAPI功能：<br/><br/>啟動和關閉仿真：可以通過API啟動、停止或暫停仿真。<br/><br/>控制仿真速度：可以通過API更改仿真的速度。<br/><br/>獲取和設置對象屬性：可以通過API獲取、設置對象的位置、姿態、速度、力、抓取等屬性。<br/><br/>控制物理引擎：可以通過API控制物理引擎的行為，如設置撞擊檢測參數、重力參數等。<br/><br/>控制仿真場景：可以通過API控制場景中的對象的添加、刪除、複製等操作。<br/><br/>控制仿真圖：可以通過API控制仿真圖的參數，如相機位置、方向、視角等。<br/><br/>現實自定義功能：可以通過API編寫自定義腳本，現實特定的功能。<br/><br/>總而言之，zmqRemoteAPI為CoppeliaSim提供了非常強大的遠程調用功能，可以讓用戶在遠程控制仿真、獲取數據、實現自定義功能等表面擁有更多的靈魂和控制力。</div>
<h1>W11</h1>
<p>40923241 建立了球場零件，並加入了計分程式，使球在碰到球門裡的感測器時記分板分數+1，並重置機器人及球的位置。</p>
<h1>紅綠車進度</h1>
<p></p>
<p>bubbleRob檔案<a href="https://drive.google.com/drive/folders/10__6FnTHkYr_VcrTfghlC3w8n4sYV373?usp=sharing">https://drive.google.com/drive/folders/10__6FnTHkYr_VcrTfghlC3w8n4sYV373?usp=sharing</a></p>
<p><span></span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/-Aobqco1j78" width="560"></iframe></span></p>
<p><span></span></p>
<p><span>將球場加入了場景，並且在兩個球們都設置了感測器，碰觸到就會記錄得分。</span></p>
<p><span><img alt="" height="305" src="/images/426.jpg" width="506"/></span></p>
<p><span></span></p>
<p><span>也順便把紅車的操控設定改成wasd並加快移動的速度了。</span></p>
<p><span><img alt="" height="540" src="/images/螢幕擷取畫面 2023-04-26 235933.jpg" width="415"/></span></p>
<p><span></span></p>
<h2>關於pip</h2>
<p><span>之前在使用coppeliasim執行sciTE程式時，一直無法順利運行，原因是需要先用pip執行pyzmq，cbor，和keyboard這三個東西，執行完後coppeliasim就能正常使用了</span></p>
<h1>Brython</h1>
<p><span>亂數排列各小組倉儲及網站</span></p>
<p></p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://raw.githubusercontent.com/mdecd2023/2b2-pj2bg1/main/downloads/w10.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://raw.githubusercontent.com/mdecd2023/2b2-pj2bg1/main/downloads/w10.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<div>
<ol>
<li></li>
</ol>
</div>