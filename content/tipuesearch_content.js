var tipuesearch = {"pages": [{'title': 'About', 'text': 'cdtemplate \n https://mde.tw/pjcopsim \n \n 40923241 nfu40923241 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'W9', 'text': '', 'tags': '', 'url': 'W9.html'}, {'title': '40923241', 'text': '這個禮拜我試著處裡coppeliasim430執行時找不到路徑的問題，發現跟python執行檔中的SciTE有關，嘗試解決，目前已知是 SciTE與python編碼格式不一致，仍在嘗試解決。 \n', 'tags': '', 'url': '40923241.html'}, {'title': '40971219', 'text': '本週嘗試與組員研究問題但能需要改進。 \n', 'tags': '', 'url': '40971219.html'}, {'title': '40971220', 'text': '本周學習如何使用鍵盤操控紅綠車。 \n', 'tags': '', 'url': '40971220.html'}, {'title': 'W10', 'text': '40971220 程式內容構想 \n 40971219 \n How do you establish a connection between a Python script and CoppeliaSim using zmqRemoteAPI? \n \n 40923241 嘗試在網站上建立Brython 程式環境，亂數排列各小組的倉儲及網站。 \n \n 問題三:zmqRemoteAPI是CoppeliaSim仿真軟件提供的一種遠程調用API，可以通過ZeroMQ網絡協議進行通信。以下是一些常見的zmqRemoteAPI功能： 啟動和關閉仿真：可以通過API啟動、停止或暫停仿真。 控制仿真速度：可以通過API更改仿真的速度。 獲取和設置對象屬性：可以通過API獲取、設置對象的位置、姿態、速度、力、抓取等屬性。 控制物理引擎：可以通過API控制物理引擎的行為，如設置撞擊檢測參數、重力參數等。 控制仿真場景：可以通過API控制場景中的對象的添加、刪除、複製等操作。 控制仿真圖：可以通過API控制仿真圖的參數，如相機位置、方向、視角等。 現實自定義功能：可以通過API編寫自定義腳本，現實特定的功能。 總而言之，zmqRemoteAPI為CoppeliaSim提供了非常強大的遠程調用功能，可以讓用戶在遠程控制仿真、獲取數據、實現自定義功能等表面擁有更多的靈魂和控制力。 \n', 'tags': '', 'url': 'W10.html'}, {'title': 'W11', 'text': '40923241 建立了球場零件，並加入了計分程式，使球在碰到球門裡的感測器時記分板分數+1，並重置機器人及球的位置。 \n', 'tags': '', 'url': 'W11.html'}, {'title': '紅綠車進度', 'text': '\n bubbleRob檔案 https://drive.google.com/drive/folders/10__6FnTHkYr_VcrTfghlC3w8n4sYV373?usp=sharing \n \n \n \n 將球場加入了場景，並且在兩個球們都設置了感測器，碰觸到就會記錄得分。 \n \n \n 也順便把紅車的操控設定改成wasd並加快移動的速度了。 \n \n \n', 'tags': '', 'url': '紅綠車進度.html'}, {'title': '關於pip', 'text': '之前在使用coppeliasim執行sciTE程式時，一直無法順利運行，原因是需要先用pip執行pyzmq，cbor，和keyboard這三個東西，執行完後coppeliasim就能正常使用了 \n', 'tags': '', 'url': '關於pip.html'}, {'title': 'Brython', 'text': '亂數排列各小組倉儲及網站 \n \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n \n \n \n \n', 'tags': '', 'url': 'Brython.html'}]};